@model Projet_Web_Commerce.Models.ModelListeVendeurs
@{
    ViewData["Title"] = "Liste des vendeurs";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>


<div class="row">
    <div class="col">
        <section>
            <div>
                @Html.Partial("GestionVendeursPages", "ListeVendeurs")
            </div>

            <div class="container mt-4">
                @{
                    var monthNames = new string[] { "Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre" };
                }
                @foreach (var date in Model.MoisAnneesDistinctsList)
                {
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title"><u>@monthNames[date.Mois - 1] @date.Annee</u></h4>
                            @{
                                var groupeParAnnee = (from vendeur in Model.VendeursList
                                                      join user in Model.UtilisateurList
                                                      on vendeur.IdUtilisateur equals user.Id
                                                      where user.EmailConfirmed && vendeur.DateCreation.Month == date.Mois && vendeur.DateCreation.Year == date.Annee
                                                      orderby vendeur.NomAffaires
                                                      join commande in Model.CommandesList
                                                      on vendeur.NoVendeur equals commande.NoVendeur into vendeurCommandes
                                                      from vc in vendeurCommandes.DefaultIfEmpty()
                                                      orderby vc?.DateCommande
                                                      select new
                                                      {
                                                          Vendeur = vendeur,
                                                          Commande = vc,
                                                          CommandesList = Model.CommandesList.Where(cp => cp.NoVendeur == vendeur.NoVendeur).ToList(),
                                                          NbProduitsInscrits = Model.ProduitsList.Count(p => p.NoVendeur == vendeur.NoVendeur),
                                                          EvaluationMoyenne = Model.EvaluationList
                                                      .Where(e => Model.ProduitsList.Any(p => p.NoVendeur == vendeur.NoVendeur && p.NoProduit == e.NoProduit))
                                                      .Select(e => (decimal?)e.Cote)
                                                      .DefaultIfEmpty(null)
                                                      .Average()
                                                      })
                                .ToList();
                            }
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">No de vendeur</th>                                        
                                        <th scope="col">Information personnelle</th>
                                        <th scope="col">Nom d'affaires</th>
                                        <th scope="col">Date de création</th>
                                        <th scope="col">Nb de produits inscrits</th>
                                        <th scope="col">Cote moyenne</th>
                                        <th scope="col">Date de dernière commande</th>
                                        <th scope="col">Montant total avant taxes </th>
                                        <th scope="col">Supprimer le panier</th>
                                        <th scope="col">Supprimer le vendeur</th>
                                        <th scope="col"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        var no = 0;
                                    }
                                    @foreach (var item in groupeParAnnee)
                                    {
                                        <tr>
                                            <td>@(++no)</td>
                                            <td>@Html.DisplayFor(modelItem => item.Vendeur.NoVendeur)</td>
                                            @if (item.Vendeur.Nom != null && item.Vendeur.Prenom != null)
                                            {
                                                <td>@Html.DisplayFor(modelItem => item.Vendeur.Nom), @Html.DisplayFor(modelItem => item.Vendeur.Prenom)</td>
                                            }
                                            else
                                            {
                                                <td>@Html.DisplayFor(modelItem => item.Vendeur.AdresseEmail)</td>
                                            }

                                            <td>@Html.DisplayFor(modelItem => item.Vendeur.NomAffaires)</td>
                                            <td>@Html.DisplayFor(modelItem => item.Vendeur.DateCreation)</td>
                                            <td>@Model.ProduitsList.Count(modelItem => modelItem.NoVendeur == item.Vendeur.NoVendeur)</td>
                                            <td>
                                                @if (item.EvaluationMoyenne.HasValue)
                                                {
                                                    @(item.EvaluationMoyenne.ToString() + "/5")
                                                }
                                                else
                                                {
                                                    <p>Aucune évaluation à ce jour</p>
                                                }
                                            </td>

                                            <td>@Html.DisplayFor(modelItem => item.Commande.DateCommande)</td>
                                            <td>@Html.DisplayFor(modelItem => item.Commande.MontantTotAvantTaxes)</td>
                                            <td>
                                                @if (item.CommandesList.Count() > 0)
                                                {
                                                    <input type="checkbox" id="SPanier" name="SPanier" value="@item.Vendeur.NoVendeur">
                                                }
                                            </td>
                                            <td>
                                                @if (item.CommandesList.Count() == 0)
                                                {
                                                    <input type="checkbox" id="SVendeur" name="SVendeur" value="@item.Vendeur.NoVendeur">
                                                }

                                            </td>
                                            <td>
                                                <a asp-action="FraudeV" class="btn btn-danger" asp-route-id="@item.Vendeur.NoVendeur">Fraude</a>
                                                <a asp-action="InactifV" class="btn btn-warning" asp-route-id="@item.Vendeur.NoVendeur">Inactif</a>
                                                @if (item.Commande == null )
                                                {
                                                    <a asp-action="Taux" class="btn btn-success"  asp-route-id="@item.Vendeur.NoVendeur">Taux redevance</a>                                                   
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>

                            </table>
                        </div>
                    </div>
                } 
                @if (Model.MoisAnneesDistinctsList.Count() == 0)
                {
                    <p>Il n'y a aucun vendeur</p>
                }
                else
                {
                    <br />
                    <a id="enregistrementButton" class="btn btn-danger">Enregistrer les modifications</a>
                }
            </div>
        </section>
    </div>
</div>

<script>
    function getMonthName(monthNumber) {
        const months = ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"];
        return months[monthNumber - 1];
    }


    document.getElementById('enregistrementButton').addEventListener('click', function () {
        var panierCheckboxes = document.getElementsByName('SPanier');
        var vendeurCheckboxes = document.getElementsByName('SVendeur');
        var panierCount = 0;
        var vendeurCount = 0;
        var formData = new FormData();

        for (var i = 0; i < panierCheckboxes.length; i++) {
            if (panierCheckboxes[i].checked) {
                panierCount++;
                formData.append('panierToDelete', panierCheckboxes[i].value);
            }
        }

        for (var i = 0; i < vendeurCheckboxes.length; i++) {
            if (vendeurCheckboxes[i].checked) {
                vendeurCount++;
                formData.append('vendeursToDelete', vendeurCheckboxes[i].value);
            }
        }


        if (panierCount > 0 || vendeurCount > 0) {
            Swal.fire({
                title: 'Enregistrement des modifications',
                html: 'Nombre de paniers à supprimer : ' + panierCount + '<br>' +
                    'Nombre de vendeurs à supprimer : ' + vendeurCount,
                icon: 'warning',
                showDenyButton: true,
                confirmButtonText: "Confirmer",
                denyButtonText: `Annuler`,
                showLoaderOnConfirm: true,
                preConfirm: () => {
                    if (vendeurCount > 0 && panierCount > 0) {
                        return Promise.all([
                            fetch('/PPGestionnaires/SupprimerVendeur', {
                                method: 'POST',
                                body: formData
                            }),
                            fetch('/PPGestionnaires/SupprimerVPanier', {
                                method: 'POST',
                                body: formData
                            })
                        ])
                            .then(([response1, response2]) => {
                                if (!response1.ok || !response2.ok) {
                                    throw new Error('One or more requests failed');
                                }
                                return Promise.all([response1.json(), response2.json()]);
                            })
                            .catch(error => {
                                Swal.showValidationMessage(`Request failed: ${error}`);
                            });
                    } else if (vendeurCount > 0) {
                        return fetch('/PPGestionnaires/SupprimerVendeur', {
                            method: 'POST',
                            body: formData
                        })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error(response.statusText);
                                }
                                return response.json();
                            })
                            .catch(error => {
                                Swal.showValidationMessage(`Request failed: ${error}`);
                            });
                    } else if (panierCount > 0) {
                        return fetch('/PPGestionnaires/SupprimerVPanier', {
                            method: 'POST',
                            body: formData
                        })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error(response.statusText);
                                }
                                return response.json();
                            })
                            .catch(error => {
                                Swal.showValidationMessage(`Request failed: ${error}`);
                            });
                    } else {
                        Swal.showValidationMessage("Aucun vendeur ou panier n'a été sélectionné.");
                        return;
                    }
                }

            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire("Sauvegarder!", "", "success").then(() => {
                        location.reload();
                    });
                } else if (result.isDenied) {
                    Swal.fire("Les modifications ne sont pas enregistrées", "", "info");
                }
            });
        } else {
            Swal.fire({
                title: 'Aucun élément sélectionné',
                text: 'Veuillez sélectionner au moins un élément à supprimer.',
                icon: 'warning'
            });
        }
    });






</script>
