@model Projet_Web_Commerce.Models.ModelListeStat
@using System.Text.Json;
@using System.Text.Json.Serialization
@{
    ViewData["Title"] = "Liste de statistique";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>

<div class="row">
    <div class="col">
        <section>
            <div>
                @Html.Partial("GestionVendeursPages", "Statistiques")
            </div>
            <br />

            <p>
                <b>Nombre total de vendeurs : </b>
                @Model.VendeursList.Count()
            </p>

            <b>Nombre de vendeurs par mois entre les dates sélectionnées  : </b><br>
            Date de début : <input type="month" id="startDate" onchange="generateReport()">

            Date de fin :  <input type="month" id="endDate" onchange="generateReport()"><br>
          
            <div id="report"></div>
            <br />            
            
            <p id="visitesCount">
            </p>

            
            <br />

        </section>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
        var vendeursListJson = Json.Serialize(Model.VendeursList.Select(p => new { DateCreation = p.DateCreation.ToString("yyyy-MM-dd") }));
       
        var visitesCountDataJson = Json.Serialize(Model.VisitesCountData);
    }

    <script>
        var vendeursList = @Html.Raw(vendeursListJson);
        console.log("Vendeurs List:", vendeursList);

        function generateReport() {
            var startDateInput = document.getElementById("startDate").value;
            var endDateInput = document.getElementById("endDate").value;

            console.log("Start Date Input:", startDateInput);
            console.log("End Date Input:", endDateInput);

            if (!startDateInput || !endDateInput) {
                document.getElementById("report").innerHTML = "Veuillez sélectionner les dates de début et de fin.";
                return;
            }

            var startDateComponents = startDateInput.split('-');
            var startYear = parseInt(startDateComponents[0]);
            var startMonth = parseInt(startDateComponents[1]);
            var startDate = new Date(startYear, startMonth - 1, 1); 

            var endDateComponents = endDateInput.split('-');
            var endYear = parseInt(endDateComponents[0]);
            var endMonth = parseInt(endDateComponents[1]);
            var endDate = new Date(endYear, endMonth - 1, 1);           

            var report = "";

            var currentDate = new Date(startDate);
            while (currentDate <= endDate) {
                var month = currentDate.getMonth() + 1;
                var year = currentDate.getFullYear(); 
                var monthYear = getFormattedDate(month, year, true);
                var vendeursCount = calculateVendeursCount(month, year, vendeursList);
                report += monthYear + " : " + vendeursCount + "<br>";

                currentDate.setMonth(currentDate.getMonth() + 1);
            }

            document.getElementById("report").innerHTML = report;
        }

        function getFormattedDate(month, year, monthYearOnly) {
            var monthNames = ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin",
                "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"];
            var monthName = monthNames[month - 1]; // Adjust month index to start from 0
            var formattedDate = monthName + " " + year;

            if (!monthYearOnly) {
                formattedDate = "le " + formattedDate;
            }

            return formattedDate;
        }

        function calculateVendeursCount(month, year, vendeursList) {
            var vendeurCount = 0;

            for (var i = 0; i < vendeursList.length; i++) {
                var vendeur = vendeursList[i];
                var dateComponents = vendeur.dateCreation.split('-');
                var vendeurYear = parseInt(dateComponents[0]);
                var vendeurMonth = parseInt(dateComponents[1]);

                if (!isNaN(vendeurMonth) && !isNaN(vendeurYear) && vendeurMonth === month && vendeurYear === year) {
                    vendeurCount++;
                }
            }
            return vendeurCount;
        }

        //------------------------------------------------------------------
        //var ppVendeurClients = Html.Raw(json);
        var visitesCountData = @Html.Raw(visitesCountDataJson);
        console.log("VendeursClient List:", visitesCountData);
        function displayVisitesCount(visitesCountData) {
            var htmlContent = "<b>Nombre de visites d’un client pour un vendeur : </b><br>";

            for (var i = 0; i < visitesCountData.length; i++) {
                var visite = visitesCountData[i];
                console.log("VendeursClient :", visite)
            }
           
            
            visitesCountData.forEach(function (item) {
                htmlContent += item.clientName + " a visité " + item.vendeurName + " : " + item.visitCount + " fois<br>";
            });

            // Display the HTML content within the specified <p> element
            document.getElementById("visitesCount").innerHTML = htmlContent;
        }

        // Call the displayVisitesCount function with the visit count data
        displayVisitesCount(visitesCountData);
    </script>
}