@model Projet_Web_Commerce.Models.ModelListeStat
@using System.Text.Json;
@using System.Text.Json.Serialization
@{
    ViewData["Title"] = "Liste de statistique";
}
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>

<div class="row">
    <div class="col">
        <section>
            <div>
                @Html.Partial("GestionVendeursPages", "Statistiques")
            </div>
            <br />

            <p>
                <b>Nombre total de vendeurs : </b>
                @Model.VendeursList.Count()
            </p>

            <b>Nombre de vendeurs par mois entre les dates sélectionnées  : </b><br>
            Date de début : <input type="month" id="startDateV" onchange="validateAndGenerateV()">

            Date de fin :  <input type="month" id="endDateV" onchange="validateAndGenerateV()"><br>
          
            <div id="reportV"></div>
            <br />

            <button class="btn btn-success" onclick="generatePDFV()">Creer PDF avec ce rapport</button>
            <br />
            <br />            
            
            <p id="visitesCount">
            </p>            
            <br />

            <b>Nombre de connexions des clients regrouper par mois  entre les dates sélectionnées : </b><br>
            Date de début : <input type="month" id="startDateC" onchange="validateAndGenerateC()">
            Date de fin :  <input type="month" id="endDateC" onchange="validateAndGenerateC()"><br>


            <div id="reportC"></div>
            <br />

            <button class="btn btn-success" onclick="generatePDFC()">Creer PDF avec ce rapport</button>
            <br />
            <br />

            <b>Information des commandes de client avec vendeur : </b><br>   
            @if(Model.OrdersByClientAndVendeurList.Count > 0){
                <table class="table">
                    <thead>
                        <tr>
                            <th>
                                NoClient
                            </th>
                            <th>
                                Nom/Prénom client
                            </th>
                            <th>
                                Montant total
                            </th>
                            <th>
                                Montant brut
                            </th>
                            <th>
                                Montant livraison
                            </th>
                            <th>
                                Date de dernière commande
                            </th>
                            <th>
                                NoVendeur
                            </th>
                            <th>
                                Nom vendeur
                            </th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.OrdersByClientAndVendeurList)
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.NoClient)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.NomPrenomClient)
                                </td>
                                @{
                                    decimal? prixtot = item.TotalCommandeAT + item.CoutLivraison;
                                    if (item.TaxesVendeur != null && item.TaxesVendeur == true && item.PourcentageTaxeVendeur != null)
                                    {
                                        prixtot = prixtot * (item.PourcentageTaxeVendeur / 100) + item.CoutLivraison;
                                    }
                                }
                                <td>
                                    @Html.DisplayFor(modelItem => prixtot)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.TotalCommandeAT)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.CoutLivraison)
                                </td>
                                 <td>
                                    @Html.DisplayFor(modelItem => item.DateDerniereCommande)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.NoVendeur)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.NomPrenomVendeur)
                                </td>
                            </tr>

                        }
                    </tbody>
                </table>
                <br />

                <button class="btn btn-success" onclick="generatePDFCV()">Creer PDF avec ce rapport</button>
            }
            else
            {
                <h6>Il n'y a aucun de commande pour le moment</h6>
                <br />
            }
               
            <div id="errorChart"></div>
            <div id="errorBar"></div>
            <br />
            
            <br />
            <canvas id="orderChart" style="width:100%;max-width:700px"></canvas>
            <br />
           
            <canvas id="salesChart" style="width:100%;max-width:700px"></canvas>

            
        </section>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
        var vendeursListJson = Json.Serialize(Model.VendeursList.Select(p => new { DateCreation = p.DateCreation.ToString("yyyy-MM-dd") }));
        var clientsListJson = Json.Serialize(Model.ClientsList.Select(p => new { DateCreation = p.DateCreation.ToString("yyyy-MM-dd") }));

        var visitesCountDataJson = Json.Serialize(Model.VisitesCountData);
        var ordersByClientAndVendeurDataJson = Json.Serialize(Model.OrdersByClientAndVendeurList);
        
        
    }

    <script>
        window.jsPDF = window.jspdf.jsPDF;
        function generatePDFV() {
            const doc = new jsPDF();
            const startDate = document.getElementById("startDateV").value;
            const endDate = document.getElementById("endDateV").value;
            let reportContent = document.getElementById("reportV").innerHTML;
            reportContent = reportContent.replace(/<br\s*\/?>/mg, '\n');
            const lines = doc.splitTextToSize(reportContent, doc.internal.pageSize.width - 20);
            const currentDate = new Date();
            const formattedDate = currentDate.getDate() + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear();
            const rapportText = "Rapport créé: " + formattedDate;
            doc.text(rapportText, 10, 10);
            doc.text("Rapport sur le nombre de vendeurs par mois entre les dates sélectionnées", 10, 20);
            doc.text("Date de début: " + startDate, 10, 30);
            doc.text("Date de fin: " + endDate, 80, 30);
            doc.text(lines, 10, 40);
            doc.save("vendeurs_info.pdf");
        }

        function generatePDFC() {
            const doc = new jsPDF();
            const startDate = document.getElementById("startDateC").value;
            const endDate = document.getElementById("endDateC").value;
            let reportContent = document.getElementById("reportC").innerHTML;
            reportContent = reportContent.replace(/<br\s*\/?>/mg, '\n');
            const lines = doc.splitTextToSize(reportContent, doc.internal.pageSize.width - 20);
            const currentDate = new Date();
            const formattedDate = currentDate.getDate() + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear();
            const rapportText = "Rapport créé: " + formattedDate;
            doc.text(rapportText, 10, 10);
            doc.text("Rapport sur le nombre de connexions des clients entre les dates sélectionnées", 10, 20);
            doc.text("Date de début: " + startDate, 10, 30);
            doc.text("Date de fin: " + endDate, 80, 30);
            doc.text(lines, 10, 40);
            doc.save("client_info.pdf");
        }

        function generatePDFCV() {
            const doc = new jsPDF();
            const currentDate = new Date();
            const formattedDate = currentDate.getDate() + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear();
            const rapportText = "Rapport créé: " + formattedDate;
            doc.text(rapportText, 10, 10);
            doc.text("Information des commandes de client avec vendeur :", 10, 30);
            const tableData = [];
            const tableRows = document.querySelectorAll('.table tbody tr');
            tableRows.forEach(row => {
                const rowData = [];
                row.querySelectorAll('td').forEach(cell => {
                    rowData.push(cell.textContent.trim());
                });
                tableData.push(rowData);
            });
            const headers = ["NoClient", "Nom/Prénom client", "Montant total", "Montant brut", "Montant livraison", "Date de dernière commande", "NoVendeur", "Nom vendeur"];

            doc.autoTable({
                head: [headers],
                body: tableData,
                startY: 40
            });
            doc.save("commandes_client_vendeur_info.pdf");
        }



        function validateAndGenerateC() {
            validateDatesC();
            generateReportC();
        }
        function validateAndGenerateV() {
            validateDatesV();
            generateReportV();
        }
        function validateDatesC() {
            var startDate = new Date(document.getElementById("startDateC").value);
            var endDate = new Date(document.getElementById("endDateC").value);
            if (endDate < startDate) {
                alert("La date de fin ne peut pas être antérieure à la date de début.");
                document.getElementById("endDateC").value = document.getElementById("startDateC").value;
            }
        }
        function validateDatesV() {
            var startDate = new Date(document.getElementById("startDateV").value);
            var endDate = new Date(document.getElementById("endDateV").value);
            if (endDate < startDate) {
                alert("La date de fin ne peut pas être antérieure à la date de début.");
                document.getElementById("endDateV").value = document.getElementById("startDateV").value;
            }
        }

        var vendeursList = @Html.Raw(vendeursListJson);
        console.log("Vendeurs List:", vendeursList);
        var clientsList = @Html.Raw(clientsListJson);
        console.log("Clients List:", clientsList);
     
        var ordersByClientAndVendeurData = @Html.Raw(ordersByClientAndVendeurDataJson);
        console.log("Order By Client Vendeur List:", ordersByClientAndVendeurData);

        var currentDate = new Date();
        var currentYearMonth = currentDate.toISOString().slice(0, 7);
        document.getElementById("endDateV").value = currentYearMonth;
        document.getElementById("endDateC").value = currentYearMonth;

        var minDateV = new Date();
        for (var i = 0; i < vendeursList.length; i++) {
            if (vendeursList[i].DateCreation) {
                var dateComponents = vendeursList[i].DateCreation.split('-');
                var year = parseInt(dateComponents[0]);
                var month = parseInt(dateComponents[1]) - 1; 
                var currentDate = new Date(year, month);
                if (currentDate < minDateV) {
                    minDateV = currentDate;
                }
            }
        }

        var minYearMonthV = minDateV.toISOString().slice(0, 7);
        document.getElementById("startDateV").value = minYearMonthV;
        generateReportV();

        var minDateC = new Date();
        for (var i = 0; i < clientsList.length; i++) {
            if (clientsList[i].DateCreation) {
                var dateComponents = clientsList[i].DateCreation.split('-');
                var year = parseInt(dateComponents[0]);
                var month = parseInt(dateComponents[1]) - 1;
                var currentDate = new Date(year, month);
                if (currentDate < minDateC) {
                    minDateC = currentDate;
                }
            }
        }

        var minYearMonthC = minDateC.toISOString().slice(0, 7);
        document.getElementById("startDateC").value = minYearMonthC;
        generateReportC();

        function generateReportV() {
            var startDateInput = document.getElementById("startDateV").value;
            var endDateInput = document.getElementById("endDateV").value;

            console.log("Start Date Input:", startDateInput);
            console.log("End Date Input:", endDateInput);

            if (!startDateInput || !endDateInput) {
                document.getElementById("reportV").innerHTML = "Veuillez sélectionner les dates de début et de fin.";
                return;
            }

            var startDateComponents = startDateInput.split('-');
            var startYear = parseInt(startDateComponents[0]);
            var startMonth = parseInt(startDateComponents[1]);
            var startDate = new Date(startYear, startMonth - 1, 1); 

            var endDateComponents = endDateInput.split('-');
            var endYear = parseInt(endDateComponents[0]);
            var endMonth = parseInt(endDateComponents[1]);
            var endDate = new Date(endYear, endMonth - 1, 1);           

            var report = "";

            var currentDate = new Date(startDate);
            while (currentDate <= endDate) {
                var month = currentDate.getMonth() + 1;
                var year = currentDate.getFullYear(); 
                var monthYear = getFormattedDate(month, year, true);
                var vendeursCount = calculateVendeursCount(month, year, vendeursList);
                report += monthYear + " : " + vendeursCount + "<br>";

                currentDate.setMonth(currentDate.getMonth() + 1);
            }

            document.getElementById("reportV").innerHTML = report;
        }

        function generateReportC() {
            var startDateInput = document.getElementById("startDateC").value;
            var endDateInput = document.getElementById("endDateC").value;

            console.log("Start Date Input:", startDateInput);
            console.log("End Date Input:", endDateInput);

            if (!startDateInput || !endDateInput) {
                document.getElementById("reportC").innerHTML = "Veuillez sélectionner les dates de début et de fin.";
                return;
            }

            var startDateComponents = startDateInput.split('-');
            var startYear = parseInt(startDateComponents[0]);
            var startMonth = parseInt(startDateComponents[1]);
            var startDate = new Date(startYear, startMonth - 1, 1);

            var endDateComponents = endDateInput.split('-');
            var endYear = parseInt(endDateComponents[0]);
            var endMonth = parseInt(endDateComponents[1]);
            var endDate = new Date(endYear, endMonth - 1, 1);

            var report = "";

            var currentDate = new Date(startDate);
            while (currentDate <= endDate) {
                var month = currentDate.getMonth() + 1;
                var year = currentDate.getFullYear();
                var monthYear = getFormattedDate(month, year, true);
                var clientsCount = calculateClientsCount(month, year, clientsList);
                report += monthYear + " : " + clientsCount + "<br>";

                currentDate.setMonth(currentDate.getMonth() + 1);
            }

            document.getElementById("reportC").innerHTML = report;
        }

        function getFormattedDate(month, year, monthYearOnly) {
            var monthNames = ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin",
                "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"];
            var monthName = monthNames[month - 1]; 
            var formattedDate = monthName + " " + year;

            if (!monthYearOnly) {
                formattedDate = "le " + formattedDate;
            }

            return formattedDate;
        }

        function calculateVendeursCount(month, year, vendeursList) {
            var vendeurCount = 0;

            for (var i = 0; i < vendeursList.length; i++) {
                var vendeur = vendeursList[i];
                var dateComponents = vendeur.dateCreation.split('-');
                var vendeurYear = parseInt(dateComponents[0]);
                var vendeurMonth = parseInt(dateComponents[1]);

                if (!isNaN(vendeurMonth) && !isNaN(vendeurYear) && vendeurMonth === month && vendeurYear === year) {
                    vendeurCount++;
                }
            }
            return vendeurCount;
        }

        function calculateClientsCount(month, year, clientsList) {
            var clientCount = 0;

            for (var i = 0; i < clientsList.length; i++) {
                var client = clientsList[i];
                var dateComponents = client.dateCreation.split('-');
                var clientYear = parseInt(dateComponents[0]);
                var clientMonth = parseInt(dateComponents[1]);

                if (!isNaN(clientMonth) && !isNaN(clientYear) && clientMonth === month && clientYear === year) {
                    clientCount++;
                }
            }
            return clientCount;
        }

        //------------------------------------------------------------------
       
        var visitesCountData = @Html.Raw(visitesCountDataJson);
        console.log("VendeursClient List:", visitesCountData);
        function displayVisitesCount(visitesCountData) {
            var htmlContent = "<b>Nombre de visites d’un client pour un vendeur : </b><br>";

            for (var i = 0; i < visitesCountData.length; i++) {
                var visite = visitesCountData[i];
                console.log("VendeursClient :", visite)
            }
           
            
            visitesCountData.forEach(function (item) {
                htmlContent += item.clientName + " a visité " + item.vendeurName + " : " + item.visitCount + " fois<br>";
            });
            if (visitesCountData.length == 0) {
                htmlContent += "Il y a eu aucun visite à date";
            }

            document.getElementById("visitesCount").innerHTML = htmlContent;
        }

        displayVisitesCount(visitesCountData);

        //------------------------------------------------------------------

        function generateRandomColor() {
            var r = Math.floor(Math.random() * 256);
            var g = Math.floor(Math.random() * 256);
            var b = Math.floor(Math.random() * 256);
            var a = 0.2;
            return `rgba(${r}, ${g}, ${b}, ${a})`;
        }

        var orderPercentages = @Html.Raw(Json.Serialize(Model.OrderPercentages));

        console.log("orderPercentages List:", orderPercentages);

        var totalOrders = 0;
        for (var i = 0; i < orderPercentages.length; i++) {
            totalOrders += orderPercentages[i].percentage;
        }

        if (Array.isArray(orderPercentages) && orderPercentages.length > 0) {
            document.getElementById('orderChart').style.display = 'block';
            document.getElementById('errorChart').style.display = 'none';
            var labels = orderPercentages.map(op => op.vendeurName);
            var data = orderPercentages.map(op => op.percentage);
            console.log("orderPercentages Label:", labels);
            console.log("orderPercentages Data:", data);
            var backgroundColors = [];
            for (var i = 0; i < orderPercentages.length; i++) {
                backgroundColors.push(generateRandomColor());
            }

            var ctx = document.getElementById('orderChart').getContext('2d');
            var chart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        data: data,
                        backgroundColor: backgroundColors
                    }]
                },

                options: {
                    title: {
                        display: true,
                        text: 'Pourcentage de produit vendu par les vendeurs'
                    },
                    tooltips: {
                        callbacks: {
                            label: function (tooltipItem, data) {
                                var label = data.labels[tooltipItem.index] || '';
                                var value = data.datasets[0].data[tooltipItem.index] || 0;
                                var percentage = ((value / totalOrders) * 100).toFixed(2) + ' %';
                                var info = label + ': ' + percentage;
                                console.log("LABEL ", info)
                                return info;
                            }
                        }
                    }
                }
            });
        } else {
            console.log("Aucune donnée n'est disponible pour afficher le graphique.");
            var messageElement = document.createElement('h6');
            messageElement.textContent = "Il n'y a aucun produit vendu.";
            messageElement.classList.add('text-danger');
            var errorChart = document.getElementById('errorChart');
            errorChart.innerHTML = ''; 
            errorChart.appendChild(messageElement);
            errorChart.style.display = 'block';
            document.getElementById('orderChart').style.display = 'none';
        }

        var labels = @Html.Raw(Json.Serialize(Model.Labels));
        var data = @Html.Raw(Json.Serialize(Model.Data));
        console.log("Labels : ", labels);
        if (Array.isArray(labels) && labels.length > 0 && Array.isArray(data) && data.length > 0) {
            document.getElementById('salesChart').style.display = 'block';
            document.getElementById('errorBar').style.display = 'none';
            var datasets = [{
                        label: "Argent Total (CAD)",
                        data: data,
                        backgroundColor: backgroundColors,
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }];

            var ctx = document.getElementById('salesChart').getContext('2d');
            var chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: datasets
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            }
                        }]
                    },
                    title: {
                        display: true,
                        text: 'Montant total des ventes par mois pour les 12 derniers mois'
                    },
                    tooltips: {
                        callbacks: {
                            label: function (tooltipItem, data) {
                                var label = data.labels[tooltipItem.index] || '';
                                var value = data.datasets[0].data[tooltipItem.index] || 0;
                                var percentage = ((value / totalOrders) * 100).toFixed(2) + ' $';
                                var info = label + ': ' + percentage;
                                console.log("LABEL ", info)
                                return info;
                            }
                        }
                    }
                }
            });
        }
        else {
            console.log("Aucune donnée n'est disponible pour afficher le graphique.");
            var messageElement = document.createElement('h6');
            messageElement.textContent = "Il n'y a aucun vente pour les 12 derniers mois.";
            messageElement.classList.add('text-danger');
            var errorChart = document.getElementById('errorBar');
            errorChart.appendChild(messageElement);
            errorChart.style.display = 'block';
            document.getElementById('salesChart').style.display = 'none';
        }


    </script>
}