@model Projet_Web_Commerce.Models.ModelListeClients
@{
    ViewData["Title"] = "Liste des clients";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>


<div class="row">
    <div class="col">
        <section>
            <div>
                @Html.Partial("GestionVendeursPages", "ListeClients")
            </div>

            <div class="container mt-4">
                @foreach (var date in Model.MoisAnneesDistinctsList)
                {
                    <div class="card">
                        <div class="card-body">
                            <script>
                                function getMonthName(monthNumber) {
                                    const months = ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"];
                                    return months[monthNumber - 1];
                                }

                                const monthNumber = @date.Mois;
                                const year = @date.Annee;
                                const monthName = getMonthName(monthNumber);

                                document.write('<h4 class="card-title"><u>' + monthName + ' ' + year + '</u></h4>');
                            </script>

                            @{

                                var groupeParAnnee = (from client in Model.ClientsList
                                                      join vendeurClient in Model.VendeursClientsList
                                                      on client.NoClient equals vendeurClient.NoClient into vendeurClients
                                                      from vc in vendeurClients.DefaultIfEmpty()
                                                      join vendeur in Model.VendeursList
                                                      on vc?.NoVendeur equals vendeur?.NoVendeur into vendeurs
                                                      from v in vendeurs.DefaultIfEmpty()
                                                      where client.DateCreation.Month == date.Mois && client.DateCreation.Year == date.Annee
                                                      orderby v?.NomAffaires, client.Nom, client.Prenom
                                                      select new
                                                      {
                                                          Client = client,
                                                          VendeurClient = vc,
                                                          Vendeur = v,
                                                          CommandesList = Model.CommandesList.Where(cp => cp.NoClient == client.NoClient).ToList(),
                                                          ClientPanierList = Model.ClientPanierList.Where(cp => cp.NoClient == client.NoClient).ToList()
                                                      })
                                .ToList();

                            }

                            <table class="table">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">No de client</th>
                                        <th scope="col">Information personnelle</th>
                                        <th scope="col">Date de création</th>
                                        <th scope="col">Date de dernière connexion</th>
                                        <th scope="col">Date de dernière visite</th>
                                        <th scope="col">Nom d'affaire</th>
                                        <th scope="col">Supprimer Panier</th>
                                        <th scope="col">Supprimer Client</th>
                                        <th scope="col"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        var no = 0;
                                    }
                                    @foreach (var item in groupeParAnnee)
                                    {
                                        <tr class="client-row" data-client-id="@item.Client.NoClient">
                                            <td>@(++no)</td>
                                            <td>@Html.DisplayFor(modelItem => item.Client.NoClient)</td>
                                            @if (item.Client.Nom != null && item.Client.Prenom != null)
                                            {
                                                <td>@Html.DisplayFor(modelItem => item.Client.Nom), @Html.DisplayFor(modelItem => item.Client.Prenom)</td>
                                            }
                                            else
                                            {
                                                <td>@Html.DisplayFor(modelItem => item.Client.AdresseEmail)</td>
                                            }

                                            <td>@Html.DisplayFor(modelItem => item.Client.DateCreation)</td>
                                            <td>@Html.DisplayFor(modelItem => item.Client.DateDerniereConnexion)</td>
                                            <td>@Html.DisplayFor(modelItem => item.VendeurClient.DateVisite)</td>
                                            <td>@Html.DisplayFor(modelItem => item.Vendeur.NomAffaires)</td>
                                            <td>
                                                @if (item.CommandesList.Count() > 0)
                                                {
                                                    <input type="checkbox" id="SPanier" name="SPanier" value="@item.Client.NoClient">
                                                }                                                
                                            </td>
                                            <td>
                                                @if (item.CommandesList.Count() == 0)
                                                {
                                                    <input type="checkbox" id="SClient" name="SClient" value="@item.Client.NoClient">
                                                }
                                                
                                            </td>
                                            <td>
                                                <a asp-action="FraudeC" class="btn btn-danger" asp-route-id="@item.Client.NoClient">Fraude</a>
                                                <a asp-action="InactifC" class="btn btn-warning" asp-route-id="@item.Client.NoClient">Inactif</a>
                                            </td>
                                        </tr>
                                        <tr class="panier-info" data-client-id="@item.Client.NoClient" style="display: none;">
                                            <td colspan="8">
                                                @foreach (var panier in item.ClientPanierList)
                                                {
                                                    var produit = Model.ProduitsList.FirstOrDefault(p => p.NoProduit == panier.NoProduit);
                                                    var vendeur = Model.VendeursList.FirstOrDefault(p => p.NoVendeur == panier.NoVendeur);
                                                    if (vendeur.Nom != null && vendeur.Prenom != null)
                                                    {
                                                        <p>@produit.Nom par @vendeur.Prenom @vendeur.Nom crée le @panier.DateCreation</p>
                                                    }
                                                    else
                                                    {
                                                        <p>@produit.Nom par @vendeur.AdresseEmail crée le @panier.DateCreation</p>
                                                    }
                                                }
                                                @if (item.ClientPanierList.Count() == 0)
                                                {
                                                    <p>Aucun panier.</p>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>

                            </table>
                        </div>
                    </div>                   
                }
                @if (Model.MoisAnneesDistinctsList.Count() == 0)
                {
                    <p>Il n'y a aucun Client</p>
                }else{
                    <br />
                    <a id="enregistrementButton" class="btn btn-danger">Enregistrement des modifications</a>
                }
                
            </div>
        </section>
    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const clientRows = document.querySelectorAll('.client-row');

        clientRows.forEach(function (row) {
            row.addEventListener('click', function () {
                const clientId = row.dataset.clientId;
                const panierInfoRow = document.querySelector(`.panier-info[data-client-id="${clientId}"]`);
                panierInfoRow.style.display = panierInfoRow.style.display === 'none' ? 'table-row' : 'none';
            });
        });
    });

    document.getElementById('enregistrementButton').addEventListener('click', function () {
        var panierCheckboxes = document.getElementsByName('SPanier');
        var clientCheckboxes = document.getElementsByName('SClient');
        var panierCount = 0;
        var clientCount = 0;
        var formData = new FormData();

        for (var i = 0; i < panierCheckboxes.length; i++) {
            if (panierCheckboxes[i].checked) {
                panierCount++;
                formData.append('panierToDelete', panierCheckboxes[i].value);
            }
        }

        for (var i = 0; i < clientCheckboxes.length; i++) {
            if (clientCheckboxes[i].checked) {
                clientCount++;
                formData.append('clientsToDelete', clientCheckboxes[i].value);
            }
        }

        console.log("Panier to delete: ", formData.getAll('panierToDelete'));
        console.log("Clients to delete: ", formData.getAll('clientsToDelete'));

        if (panierCount > 0 || clientCount > 0) {
            Swal.fire({
                title: 'Enregistrement des modifications',
                html: 'Nombre de Panier Supprimer : ' + panierCount + '<br>' +
                    'Nombre de suppressions de clients : ' + clientCount,
                icon: 'warning',
                showDenyButton: true,
                confirmButtonText: "Confirmer",
                denyButtonText: `Annuler`,
                showLoaderOnConfirm: true,
                preConfirm: () => {
                    if (clientCount > 0 && panierCount > 0) {
                        return Promise.all([
                            fetch('/PPGestionnaires/SupprimerClient', {
                                method: 'POST',
                                body: formData
                            }),
                            fetch('/PPGestionnaires/SupprimerPanier', {
                                method: 'POST',
                                body: formData
                            })
                        ])
                            .then(([response1, response2]) => {
                                if (!response1.ok || !response2.ok) {
                                    throw new Error('One or more requests failed');
                                }
                                return Promise.all([response1.json(), response2.json()]);
                            })
                            .catch(error => {
                                Swal.showValidationMessage(`Request failed: ${error}`);
                            });
                    } else if (clientCount > 0) {
                        return fetch('/PPGestionnaires/SupprimerClient', {
                            method: 'POST',
                            body: formData
                        })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error(response.statusText);
                                }
                                return response.json();
                            })
                            .catch(error => {
                                Swal.showValidationMessage(`Request failed: ${error}`);
                            });
                    } else if (panierCount > 0) {
                        return fetch('/PPGestionnaires/SupprimerPanier', {
                            method: 'POST',
                            body: formData
                        })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error(response.statusText);
                                }
                                return response.json();
                            })
                            .catch(error => {
                                Swal.showValidationMessage(`Request failed: ${error}`);
                            });
                    } else {
                        Swal.showValidationMessage("Aucun client ou paniers n'a été sélectionné.");
                        return;
                    }
                }

            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire("Sauvegarder!", "", "success").then(() => {
                        location.reload();
                    });
                } else if (result.isDenied) {
                    Swal.fire("Les modifications ne sont pas enregistrées", "", "info");
                }
            });
        } else {
            Swal.fire({
                title: 'Aucun élément sélectionné',
                text: 'Veuillez sélectionner au moins un élément à supprimer.',
                icon: 'warning'
            });
        }
    });






</script>
